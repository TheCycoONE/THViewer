/*
 This project is made available under the terms of the BSD license, more
 information can be found at
 http://www.opensource.org/licenses/bsd-license.html
 
 Copyright (c) 2007, Alexander Gitter
 
 All rights reserved.
*/

package th.reader;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Vector;

import org.apache.commons.io.EndianUtils;

import th.data.THMap;
import th.data.THPalette;
import th.data.Tile;
import util.ABuffer;

public class LevelReader {

    public static final int[] tileMap = {
        // 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
        // 0
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        // 1
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        // 2
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
        // 3
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
        // 4
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
        // 5
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
        // 6
        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
        // 7
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
        // 8
        0x82, 0x83, 0x86, 0x87, 0x8a, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x8d, 0x00, 0x00,
        // 9
        0x00, 0x00, 0x8c, 0x8d, 0x00, 0x00, 0x9a, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0x00, 0x00,
        // a
        0xaf, 0x00, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xaf, 0xaf, 0xb0, 0xb0,
        // b
        0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5,
        // c
        0xc6, 0xc7, 0x00, 0x80, 0x81, 0x84, 0x85, 0x88, 0x89, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
        // d
        0x97, 0x98, 0x99, 0x00, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0x00, 0x00, 0x00, 0x00,
        // e
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        // f
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    
    public static THMap read(FileInputStream mapStream, ABuffer tabStream, FileInputStream chunkStream, THPalette palette, Color background) throws IOException {
        Vector<BufferedImage> tiles = ChunksReader.readAll(chunkStream, tabStream, palette, background);
        THMap result = new THMap();
        
        result.setPlayers(mapStream.read());
        mapStream.skip(33);
        
        for(int y = 0; y < 128; ++y) {
            for(int x = 0; x < 128; ++x) {
                int pos = (int)mapStream.getChannel().position();
                int anim = EndianUtils.readSwappedShort(mapStream);
                
                int layer0id = mapStream.read();
                int layer1id = mapStream.read();
                int layer2id = mapStream.read();
                
                layer0id = tileMap[layer0id];
                layer1id = tileMap[layer1id];
                layer2id = tileMap[layer2id];
                
                BufferedImage l0 = tiles.elementAt(layer0id);
                BufferedImage l1 = null;
                BufferedImage l2 = null;
                if(layer1id > 0) {
                    l1 = tiles.elementAt(layer1id);
                }
                
                if(layer2id > 0) {
                    l2 = tiles.elementAt(layer2id);
                }
                
                mapStream.skip(3);
                
                Tile tile = new Tile(anim, l0, l1, l2, pos);
                result.setTile(x, y, tile);
            }
        }
        
        for(int y = 0; y < 128; ++y) {
            for(int x = 0; x < 128; ++x) {
                int pid = EndianUtils.readSwappedShort(mapStream);
                
                result.getTile(x, y).setParcel(pid);
            }
        }
        
        mapStream.close();
        return result;
    }
    
}
